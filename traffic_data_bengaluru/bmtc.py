"""Bengaluru Metropolitan Transport Corporation (BMTC) is a state-owned public road transport corporation in the Indian city of Bengaluru."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/bmtc.ipynb.

# %% auto 0
__all__ = ['get_latest_directory', 'fetch_routes', 'fetch_route_points', 'fetch_vehicles', 'fetch_trip_details',
           'extract_live_location']

# %% ../nbs/bmtc.ipynb 3
import string
import json
import time
from pathlib import Path
import datetime
from tqdm import tqdm
import geojson

import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

import requests
import pandas as pd

# %% ../nbs/bmtc.ipynb 4
def get_latest_directory(directory: Path):
    "Return the latest directory inside a given directory after sorting by name."
    latest = (directory 
        .ls() 
        .filter(lambda f: not f.name.startswith('.')) 
        .sorted(key=lambda f: f.name)[-1]
    )
    return latest

# %% ../nbs/bmtc.ipynb 9
def fetch_routes(pattern: str = ""):
    time.sleep(0.1)
    logging.info(f"Fetching routes for pattern = '{pattern}'")
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/SearchRoute_v2"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "lan": "en"
    }

    if pattern != '':
        payload = {"routetext": pattern}
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()['data']
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")
            return None
    else:
        routes = []
        characters = string.digits + string.ascii_lowercase
        for pattern in characters:
            time.sleep(0.1)
            routes += fetch_routes(pattern)
        return routes

# %% ../nbs/bmtc.ipynb 15
def fetch_route_points(route_id: str):
    time.sleep(0.1)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/RoutePoints"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "lan": "en"
    }

    payload = {"routeid": int(route_id)}
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

# %% ../nbs/bmtc.ipynb 25
def fetch_vehicles(pattern: str = ""):
    time.sleep(0.1)
    logging.info(f"Fetching vehicles for pattern = '{pattern}'")
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/ListVehicles"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "lan": "en"
    }

    if pattern != '':
        payload = {"vehicleRegNo": pattern}
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()['data']
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")
            return None
    else:
        vehicles = []
        characters = string.digits + string.ascii_lowercase
        for pattern in characters:
            time.sleep(0.1)
            vehicles += fetch_vehicles(pattern)
        return vehicles

# %% ../nbs/bmtc.ipynb 31
def fetch_trip_details(vehicle_id: int):
    time.sleep(0.1)
    logging.info(f"Fetching trip details for vehicle ID = '{vehicle_id}'")
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/VehicleTripDetails_v2"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
    }

    payload = json.dumps({"vehicleId": int(vehicle_id)})
    try:
        response = requests.post(url, headers=headers, data=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        print("Response text:", getattr(e.response, "text", None))
        return None

# %% ../nbs/bmtc.ipynb 36
def get_latest_directory(directory: Path):
    "Return the latest directory, sorting by name for a given directory."
    latest = (directory 
        .ls() 
        .filter(lambda f: not f.name.startswith('.')) 
        .sorted(key=lambda f: f.name)[-1]
    )
    return latest

# %% ../nbs/bmtc.ipynb 37
def extract_live_location(trip_detail):
    """Extract live location from trip detail."""
    try:
        locations = trip_detail['LiveLocation']
    except TypeError as e:
        # When trip_detail is None.
        locations = []

    # When there are more than one live locations, it's mostly because of the vehicle assigned to more than one route at a time.
    # We could use the route details and live location to determine which is the right route that the vehicle is running on.
    return locations
