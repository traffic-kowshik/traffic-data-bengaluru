"""Bengaluru Metropolitan Transport Corporation (BMTC) is a state-owned public road transport corporation in the Indian city of Bengaluru."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/bmtc.ipynb.

# %% auto 0
__all__ = ['fetch_routes', 'process_routes', 'fetch_route_points', 'get_route_id', 'convert_route_to_geojson', 'fetch_vehicles',
           'fetch_trip_details', 'extract_live_location', 'extract_live_locations']

# %% ../nbs/bmtc.ipynb 4
import string
import json
import time
from pathlib import Path
import datetime
from tqdm import tqdm
import geojson

import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

import requests
import pandas as pd

from .utils import *

# %% ../nbs/bmtc.ipynb 9
def fetch_routes(pattern: str = "", sleep_duration: float = 0.1):
    """Fetches BMTC routes matching the given pattern, or all routes if pattern is empty."""
    time.sleep(sleep_duration)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/SearchRoute_v2"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "lan": "en"
    }

    if pattern != '':
        payload = {"routetext": pattern}
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()['data']
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")
            return None
    else:
        routes = []
        characters = string.digits + string.ascii_lowercase
        for pattern in characters:
            time.sleep(0.1)
            routes += fetch_routes(pattern)
        return routes

# %% ../nbs/bmtc.ipynb 11
def process_routes(routes):
    """Process and clean route data, returning a DataFrame with `route_id` and `route_number`."""
    df_routes = pd.DataFrame(routes)
    df_routes = df_routes.drop_duplicates(subset=["routeno"], keep="first")

    df_routes.rename(columns = {'routeno': 'route_number', 'routeparentid': 'route_id'}, inplace=True)
    df_routes = df_routes.sort_values(by='route_id').reset_index(drop=True)
    columns = ['route_id', 'route_number']
    return df_routes[columns]

# %% ../nbs/bmtc.ipynb 15
def fetch_route_points(route_id: str, sleep_duration: float = 0.1):
    """Fetches geo-locations for a given BMTC `route_id` from the API."""
    time.sleep(sleep_duration)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/RoutePoints"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "lan": "en"
    }

    payload = {"routeid": int(route_id)}
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

# %% ../nbs/bmtc.ipynb 19
def get_route_id(filepath: Path):
    """The filepath has `route_id` at the end."""
    return filepath.name.split('.')[0]

# %% ../nbs/bmtc.ipynb 20
def convert_route_to_geojson(route, properties):
    """Converts route into a geojson Feature."""
    if route is None:
        return None
    coordinates = []
    for row in route['data']:
        # longitude is first, latitude comes next.
        coordinates.append([round(float(row['longitude']), 6), round(float(row['latitude']), 6)])
    geometry = geojson.LineString(coordinates)
    feature = geojson.Feature(geometry = geometry, properties = properties)
    return feature

# %% ../nbs/bmtc.ipynb 25
def fetch_vehicles(pattern: str = "", sleep_duration: float = 0.1):
    """Fetch vehicles matching the given registration number pattern from BMTC API."""
    time.sleep(sleep_duration)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/ListVehicles"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "lan": "en"
    }

    if pattern != '':
        payload = {"vehicleRegNo": pattern}
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()['data']
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")
            return None
    else:
        vehicles = []
        characters = string.digits + string.ascii_lowercase
        for pattern in tqdm(characters, desc = 'Fetching vehicles'):
            time.sleep(0.1)
            vehicles += fetch_vehicles(pattern)
        return vehicles

# %% ../nbs/bmtc.ipynb 31
def fetch_trip_details(vehicle_id: int, sleep_duration: float = 0.1):
    """Fetch trip details for a given vehicle ID from the BMTC API."""
    time.sleep(sleep_duration)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/VehicleTripDetails_v2"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
    }

    payload = json.dumps({"vehicleId": int(vehicle_id)})
    try:
        response = requests.post(url, headers=headers, data=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        print("Response text:", getattr(e.response, "text", None))
        return None

# %% ../nbs/bmtc.ipynb 36
def extract_live_location(trip_detail):
    """Extract live location from trip detail."""
    try:
        locations = trip_detail['LiveLocation']
    except TypeError as e:
        # When trip_detail is None.
        locations = []

    # When there are more than one live locations, it's mostly because of the vehicle assigned to more than one route at a time.
    # We could use the route details and live location to determine which is the right route that the vehicle is running on.
    return locations

# %% ../nbs/bmtc.ipynb 37
def extract_live_locations(directory: Path):
    """Extract live location for all trip details in a directory."""
    live_locations = []
    for filepath in tqdm(directory.ls(), total = directory.ls().__len__(), desc = 'Extracting live locations'):
        with open(filepath) as f:
            trip_detail = json.load(f)
            
            # Extract live locations.
            live_location = extract_live_location(trip_detail)
            live_locations += live_location
    live_locations = pd.DataFrame(live_locations)
    return live_locations
