# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/bmtc/04_trip_details.ipynb.

# %% auto 0
__all__ = ['logger', 'fetch_trip_details', 'extract_live_location', 'get_live_locations', 'extract_route_detail',
           'task_fetch_trip_details']

# %% ../../nbs/bmtc/04_trip_details.ipynb 11
import string
import json
import time
import datetime
from tqdm import tqdm
import geojson
import random
import tarfile

import requests
import pandas as pd
pd.set_option('display.max_columns', None)

from fastcore.all import Path
from nbdev.config import get_config

from ..utils import *
from .vehicles import get_vehicles

# %% ../../nbs/bmtc/04_trip_details.ipynb 12
import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# %% ../../nbs/bmtc/04_trip_details.ipynb 17
def fetch_trip_details(vehicle_id: int, sleep_duration: float = 0.1):
    """Fetch trip details for a given vehicle ID from the BMTC API."""
    time.sleep(sleep_duration)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/VehicleTripDetails_v2"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
    }

    payload = json.dumps({"vehicleId": int(vehicle_id)})
    try:
        response = requests.post(url, headers=headers, data=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        print("Response text:", getattr(e.response, "text", None))
        return None

# %% ../../nbs/bmtc/04_trip_details.ipynb 23
def extract_live_location(trip_details):
    """Extract live location from trip details."""
    try:
        locations = trip_details['LiveLocation']
    except TypeError as e:
        # When trip_details is None.
        locations = []

    # When there are more than one live locations, it's mostly because of the vehicle assigned to more than one route at a time.
    # We could use the route details and live location to determine which is the right route that the vehicle is running on.
    return locations

# %% ../../nbs/bmtc/04_trip_details.ipynb 26
def get_live_locations(directory: Path):
    """Extract live location for all trip details in a directory."""
    latest = get_latest_file(data_directory / 'raw' / 'vehicle_trip_details')
    files = extract_files(latest)
    return files

    live_locations = []
    for filepath in tqdm(files, total = files.__len__(), desc = 'Extracting live locations'):
        live_locations += extract_live_location(read_file(filepath))
    live_locations = pd.DataFrame(live_locations)
    return live_locations

# %% ../../nbs/bmtc/04_trip_details.ipynb 31
def extract_route_detail(trip_detail):
    try:
        details = trip_detail['RouteDetails']
    except TypeError as e:
        details = []
    return details

# %% ../../nbs/bmtc/04_trip_details.ipynb 38
def task_fetch_trip_details(data_directory: Path):
    folder_name = f'{str(int(datetime.datetime.now().timestamp()))}'
    directory = data_directory / 'raw' / 'vehicle_trip_details' / folder_name
    directory.mkdir(exist_ok=True, parents=True)

    logger.info("Fetching vehicle trip details ...")
    df_vehicles = get_vehicles(data_directory)
    for index, row in tqdm(df_vehicles.iterrows(), total = df_vehicles.shape[0], desc = 'Fetching vehicle trip details'):
        trip_details = fetch_trip_details(vehicle_id = row['vehicle_id']) 
        with open(directory / f"{row['vehicle_id']}.json", "w") as f:
            json.dump(trip_details, f, indent = 4)

    tar_path = directory.with_suffix('.tar.gz')
    with tarfile.open(tar_path, "w:gz") as tar:
        tar.add(directory, arcname=directory.name)

    logger.info(f"Compressed {directory} into {tar_path}")
