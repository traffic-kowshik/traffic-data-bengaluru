"""Takes a `vehicle_id` as input and returns route details of the current trip along with the live location of the vehicle."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/bmtc/apis/04_vehicle_trip_details.ipynb.

# %% auto 0
__all__ = ['fetch_vehicle_trip_details', 'extract_live_location', 'extract_live_locations']

# %% ../../../nbs/bmtc/apis/04_vehicle_trip_details.ipynb 13
import string
import json
import time
import datetime
from tqdm import tqdm
import geojson

import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

import requests
import pandas as pd
from fastcore.all import Path
from ...utils import *
from nbdev.config import get_config

# %% ../../../nbs/bmtc/apis/04_vehicle_trip_details.ipynb 18
def fetch_vehicle_trip_details(vehicle_id: int, sleep_duration: float = 0.1):
    """Fetch trip details for a given vehicle ID from the BMTC API."""
    time.sleep(sleep_duration)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/VehicleTripDetails_v2"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36"
    }

    payload = json.dumps({"vehicleId": int(vehicle_id)})
    try:
        response = requests.post(url, headers=headers, data=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        print("Response text:", getattr(e.response, "text", None))
        return None

# %% ../../../nbs/bmtc/apis/04_vehicle_trip_details.ipynb 21
def extract_live_location(trip_detail):
    """Extract live location from trip detail."""
    try:
        locations = trip_detail['LiveLocation']
    except TypeError as e:
        # When trip_detail is None.
        locations = []

    # When there are more than one live locations, it's mostly because of the vehicle assigned to more than one route at a time.
    # We could use the route details and live location to determine which is the right route that the vehicle is running on.
    return locations

# %% ../../../nbs/bmtc/apis/04_vehicle_trip_details.ipynb 22
def extract_live_locations(directory: Path):
    """Extract live location for all trip details in a directory."""
    live_locations = []
    for filepath in tqdm(directory.ls(), total = directory.ls().__len__(), desc = 'Extracting live locations'):
        with open(filepath) as f:
            trip_detail = json.load(f)
            
            # Extract live locations.
            live_location = extract_live_location(trip_detail)
            live_locations += live_location
    live_locations = pd.DataFrame(live_locations)
    return live_locations
