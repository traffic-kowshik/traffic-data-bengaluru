"""Takes a route text for regex matching and returns matching routes in response."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/bmtc/apis/01_routes.ipynb.

# %% auto 0
__all__ = ['fetch_routes', 'process_routes', 'get_routes']

# %% ../../../nbs/bmtc/apis/01_routes.ipynb 6
import string
import json
import time
import datetime
from tqdm import tqdm
import geojson

import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

import requests
import pandas as pd
from fastcore.all import Path
from ...utils import *

# %% ../../../nbs/bmtc/apis/01_routes.ipynb 11
def fetch_routes(pattern: str = "", sleep_duration: float = 0.1):
    """Fetches BMTC routes matching the given pattern, or all routes if pattern is empty."""
    time.sleep(sleep_duration)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/SearchRoute_v2"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "lan": "en"
    }

    if pattern != '':
        payload = {"routetext": pattern}
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            return response.json()['data']
        except requests.exceptions.RequestException as e:
            print(f"Error: {e}")
            return None
    else:
        routes = []
        characters = string.digits + string.ascii_lowercase
        for pattern in tqdm(characters, desc = 'Fetching routes'):
            routes += fetch_routes(pattern)
        return routes

# %% ../../../nbs/bmtc/apis/01_routes.ipynb 14
def process_routes(routes):
    """Process and clean route data, returning a DataFrame with `route_id` and `route_number`."""
    df_routes = pd.DataFrame(routes)
    df_routes = df_routes.drop_duplicates(subset=["routeno"], keep="first")

    df_routes.rename(columns = {'routeno': 'route_number', 'routeparentid': 'route_id'}, inplace=True)
    df_routes = df_routes.sort_values(by='route_id').reset_index(drop=True)
    columns = ['route_id', 'route_number']
    return df_routes[columns]

# %% ../../../nbs/bmtc/apis/01_routes.ipynb 17
def get_routes(data_directory: Path):
    filepath = get_latest_directory(data_directory / "cleaned" / "routes")
    routes = pd.read_csv(filepath)
    return routes
