# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/bmtc/apis/02_route_points.ipynb.

# %% auto 0
__all__ = ['logger', 'fetch_route_points', 'convert_route_to_geojson', 'get_route_id', 'task_fetch_route_points']

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 4
import string
import json
import time
import datetime
from tqdm import tqdm
import geojson

import requests
import pandas as pd
from fastcore.all import Path
from nbdev.config import get_config

from ...utils import *
from .routes import get_routes

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 5
import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 10
def fetch_route_points(route_id: str, sleep_duration: float = 0.1):
    """Fetches geo-locations for a given BMTC `route_id` from the API."""
    time.sleep(sleep_duration)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/RoutePoints"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "lan": "en"
    }

    payload = {"routeid": int(route_id)}
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 14
def convert_route_to_geojson(route, properties):
    """Converts route into a geojson Feature."""
    if route is None:
        return None
    coordinates = []
    for row in route['data']:
        # longitude is first, latitude comes next.
        coordinates.append([round(float(row['longitude']), 6), round(float(row['latitude']), 6)])
    geometry = geojson.LineString(coordinates)
    feature = geojson.Feature(geometry = geometry, properties = properties)
    return feature

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 18
def get_route_id(filepath: Path):
    """The filepath has `route_id` at the end."""
    return filepath.name.split('.')[0]

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 20
def task_fetch_route_points(data_directory: Path):
    logger.info("Fetching route points ...")

    df_routes = get_routes(data_directory)
    now = str(int(datetime.datetime.now().timestamp()))

    raw_directory = data_directory / 'raw' / 'route_points' / now
    raw_directory.mkdir(exist_ok=True, parents=True)

    for index, row in tqdm(df_routes.iterrows(), total = df_routes.shape[0], desc = 'Fetching route points'):
        trip_details = fetch_route_points(route_id = row['route_id']) 
        with open(raw_directory / f"{row['route_id']}.json", "w") as f:
            json.dump(trip_details, f, indent = 4)

    logger.info("Processing route points ...")
    cleaned_directory = data_directory / 'cleaned' / 'route_points' / now
    cleaned_directory.mkdir(exist_ok=True, parents=True)

    features = []
    for filepath in tqdm(raw_directory.ls(), total = raw_directory.ls().__len__(), desc = 'Converting route points to geojson'):
        route = read_file(filepath)
        if route is None:
            continue
        route_id = get_route_id(filepath)
        properties = {'route_id': route_id}
        
        feature = convert_route_to_geojson(route, properties)
        with open(cleaned_directory / f"{route_id}.json", "w") as f:
            json.dump(feature, f, indent = 4)
        features.append(feature)

    # Write to a file as a geojson FeatureCollection.
    fc = geojson.FeatureCollection(features = features)
    with open(data_directory / 'cleaned' / 'route_points' / f'{now}.geojson', 'w') as f:
        json.dump(fc, f)
