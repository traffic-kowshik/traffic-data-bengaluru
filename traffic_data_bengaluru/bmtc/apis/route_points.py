"""Takes `route_id` as input and returns geo-locations of the route to be taken in response. There isn't an identifier for the bus stop in this dataset. Instead it'points are at regular distance along the route."""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../../nbs/bmtc/apis/02_route_points.ipynb.

# %% auto 0
__all__ = ['fetch_route_points', 'get_route_id', 'convert_route_to_geojson']

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 7
import string
import json
import time
import datetime
from tqdm import tqdm
import geojson

import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

import requests
import pandas as pd
from fastcore.all import Path
from ...utils import *
from nbdev.config import get_config

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 12
def fetch_route_points(route_id: str, sleep_duration: float = 0.1):
    """Fetches geo-locations for a given BMTC `route_id` from the API."""
    time.sleep(sleep_duration)
    url = "https://bmtcmobileapi.karnataka.gov.in/WebAPI/RoutePoints"

    headers = {
        "Content-Type": "application/json",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36",
        "lan": "en"
    }

    payload = {"routeid": int(route_id)}
    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        return None

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 15
def get_route_id(filepath: Path):
    """The filepath has `route_id` at the end."""
    return filepath.name.split('.')[0]

# %% ../../../nbs/bmtc/apis/02_route_points.ipynb 16
def convert_route_to_geojson(route, properties):
    """Converts route into a geojson Feature."""
    if route is None:
        return None
    coordinates = []
    for row in route['data']:
        # longitude is first, latitude comes next.
        coordinates.append([round(float(row['longitude']), 6), round(float(row['latitude']), 6)])
    geometry = geojson.LineString(coordinates)
    feature = geojson.Feature(geometry = geometry, properties = properties)
    return feature
