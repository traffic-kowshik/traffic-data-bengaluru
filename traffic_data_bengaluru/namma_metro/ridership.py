# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/namma_metro/01_ridership.ipynb.

# %% auto 0
__all__ = ['logger', 'fetch_ridership', 'task_fetch_ridership', 'get_ridership']

# %% ../../nbs/namma_metro/01_ridership.ipynb 4
import os
import time
import json
import requests

from fastcore.all import Path
import pandas as pd

from dotenv import load_dotenv
load_dotenv()

import inflection
from ..utils import *

# %% ../../nbs/namma_metro/01_ridership.ipynb 5
import logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

# %% ../../nbs/namma_metro/01_ridership.ipynb 8
def fetch_ridership(sleep_duration: float = 0.1):
    """Fetch ridership data from the BMRC API."""
    time.sleep(sleep_duration)

    token = os.environ.get("BMRC_TOKEN")

    
    url = "https://english.bmrc.co.in:8282/api/users/getridership"
    headers = {
        "Accept": "application/json",
        "Authorization": f"Bearer {token}"
    }
    response = requests.get(url, headers=headers, verify=False)
    response.raise_for_status()
    return response.json()

# %% ../../nbs/namma_metro/01_ridership.ipynb 11
def task_fetch_ridership(data_directory: Path):
    logger.info("Fetching ridership ...")

    filepath = data_directory / "namma_metro" / 'raw' / 'ridership.jsonl'
    filepath.parent.mkdir(parents=True, exist_ok=True)

    ridership = fetch_ridership()
    append_to_file(filepath, ridership)

    logger.info(f"Ridership data saved successfully.")

# %% ../../nbs/namma_metro/01_ridership.ipynb 14
def get_ridership(data_directory: Path):
    filepath = data_directory / "namma_metro" / "raw" / "ridership.jsonl"
    records = []
    with open(filepath, "r") as f:
        for line in f:
            item = json.loads(line)
            results = item.get("results", [])
            if results:
                records.append(results[0])

    df = pd.DataFrame(records)
    df.columns = [inflection.underscore(col) for col in df.columns]

    df['ridership_date'] = pd.to_datetime(df['ridership_date'], format='%d-%m-%Y')
    df = df.sort_values(by='ridership_date', ascending=False)
    
    cols = ['ridership_date'] + [col for col in df.columns if col != 'ridership_date']
    df = df[cols]
    return df
